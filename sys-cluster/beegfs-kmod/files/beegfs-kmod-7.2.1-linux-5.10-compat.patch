commit 720a2b8a0ff4b32f1b88e089ff87fca8c3bb5894
Author: Timo Rothenpieler <timo.rothenpieler@uni-bremen.de>
Date:   Tue Mar 16 12:46:48 2021 +0100

    Linux 5.10 compat
    
    This very likely throws compat with older kernels under the bus, so use
    only on 5.10(+).

diff --git a/client_module/source/app/App.c b/client_module/source/app/App.c
index dc9b762..6c66f34 100644
--- a/client_module/source/app/App.c
+++ b/client_module/source/app/App.c
@@ -522,7 +522,7 @@ bool __App_initLocalNodeInfo(App* this)
    currentPID = current->pid;
 
    nodeID = StringTk_kasprintf("%llX-%llX-%s",
-      (uint64_t)currentPID, (uint64_t)TimeAbs_getTimeval(&nowT)->tv_sec, hostname);
+      (uint64_t)currentPID, (uint64_t)TimeAbs_getSec(&nowT), hostname);
 
    // note: numeric ID gets initialized with 0; will be set by management later in InternodeSyncer
    this->localNode = Node_construct(this, nodeID, (NumNodeID){0},
diff --git a/client_module/source/common/Common.h b/client_module/source/common/Common.h
index 13e6794..2115444 100644
--- a/client_module/source/common/Common.h
+++ b/client_module/source/common/Common.h
@@ -7,11 +7,13 @@
 #include <linux/sched.h> /* for TASK_COMM_LEN */
 #include <linux/string.h>
 #include <linux/time.h>
+#include <linux/ktime.h>
 #include <linux/types.h>
 #include <linux/version.h>
 #include <linux/vmalloc.h>
 #include <linux/errno.h>
 #include <linux/slab.h>
+#include <linux/uaccess.h>
 #include <asm/uaccess.h>
 #include <stdarg.h>
 #include <linux/types.h>
@@ -140,10 +142,15 @@
 #endif
 
 /* wrappers for get_fs()/set_fs() */
+#ifdef CONFIG_SET_FS
 #define ACQUIRE_PROCESS_CONTEXT(fs_varname) \
    do { fs_varname = get_fs(); set_fs(KERNEL_DS); } while(0)
 #define RELEASE_PROCESS_CONTEXT(fs_varname) \
    set_fs(fs_varname)
+#else
+#define ACQUIRE_PROCESS_CONTEXT(fs_varname) do{ (void)fs_varname; } while(0)
+#define RELEASE_PROCESS_CONTEXT(fs_varname) do{ (void)fs_varname; } while(0)
+#endif
 
 
 // in 4.13 wait_queue_t got renamed to wait_queue_entry_t
@@ -160,7 +167,16 @@ static inline struct timespec64 current_fs_time(struct super_block *sb)
 #else
    struct timespec64 now = current_kernel_time64();
 #endif /* KERNEL_HAS_KTIME_GET */
-   return timespec64_trunc(now, sb->s_time_gran);
+   if (sb->s_time_gran == 1) {
+      /* nothing */
+   } else if (sb->s_time_gran == NSEC_PER_SEC) {
+      now.tv_nsec = 0;
+   } else if (sb->s_time_gran > 1 && sb->s_time_gran < NSEC_PER_SEC) {
+      now.tv_nsec -= now.tv_nsec % sb->s_time_gran;
+   } else {
+      WARN(1, "illegal file time granularity: %u", sb->s_time_gran);
+   }
+   return now;
 }
 #elif !defined(KERNEL_HAS_CURRENT_FS_TIME)
 static inline struct timespec current_fs_time(struct super_block *sb)
diff --git a/client_module/source/common/FhgfsTypes.h b/client_module/source/common/FhgfsTypes.h
index 91ec863..287b044 100644
--- a/client_module/source/common/FhgfsTypes.h
+++ b/client_module/source/common/FhgfsTypes.h
@@ -21,9 +21,9 @@ struct fhgfs_stat
    gid_t gid;
    loff_t size;
    uint64_t blocks;
-   struct timespec atime;
-   struct timespec mtime;
-   struct timespec ctime; // attrib change time (not creation time)
+   struct timespec64 atime;
+   struct timespec64 mtime;
+   struct timespec64 ctime; // attrib change time (not creation time)
 };
 typedef struct fhgfs_stat fhgfs_stat;
 
diff --git a/client_module/source/common/net/sock/StandardSocket.c b/client_module/source/common/net/sock/StandardSocket.c
index 19f2e74..53d298f 100644
--- a/client_module/source/common/net/sock/StandardSocket.c
+++ b/client_module/source/common/net/sock/StandardSocket.c
@@ -244,7 +244,7 @@ void __StandardSocket_setAllocMode(StandardSocket* this, gfp_t flags)
  * @return 0 on success, error code otherwise (=> different from userspace version)
  */
 int _StandardSocket_setsockopt(StandardSocket* this, int level,
-   int optname, char* optval, int optlen)
+   int optname, sockptr_t optval, int optlen)
 {
    int retVal = -EINVAL;
    mm_segment_t oldfs;
@@ -321,7 +321,7 @@ bool StandardSocket_setSoKeepAlive(StandardSocket* this, bool enable)
    int setRes = _StandardSocket_setsockopt(this,
       SOL_SOCKET,
       SO_KEEPALIVE,
-      (char*)&keepAliveVal,
+      KERNEL_SOCKPTR(&keepAliveVal),
       sizeof(keepAliveVal) );
 
    if(setRes != 0)
@@ -337,7 +337,7 @@ bool StandardSocket_setSoBroadcast(StandardSocket* this, bool enable)
    int setRes = _StandardSocket_setsockopt(this,
       SOL_SOCKET,
       SO_BROADCAST,
-      (char*)&broadcastVal,
+      KERNEL_SOCKPTR(&broadcastVal),
       sizeof(broadcastVal) );
 
    if(setRes != 0)
@@ -393,7 +393,7 @@ bool StandardSocket_setSoRcvBuf(StandardSocket* this, int size)
    setRes = _StandardSocket_setsockopt(this,
       SOL_SOCKET,
       SO_RCVBUF,
-      (char*)&halfSize,
+      KERNEL_SOCKPTR(&halfSize),
       sizeof(halfSize) );
 
    if(setRes)
@@ -412,7 +412,7 @@ bool StandardSocket_setTcpNoDelay(StandardSocket* this, bool enable)
    int noDelayRes = _StandardSocket_setsockopt(this,
       IPPROTO_TCP,
       TCP_NODELAY,
-      (char*)&noDelayVal,
+      KERNEL_SOCKPTR(&noDelayVal),
       sizeof(noDelayVal) );
 
    if(noDelayRes != 0)
@@ -428,7 +428,7 @@ bool StandardSocket_setTcpCork(StandardSocket* this, bool enable)
    int setRes = _StandardSocket_setsockopt(this,
       SOL_TCP,
       TCP_CORK,
-      (char*)&corkVal,
+      KERNEL_SOCKPTR(&corkVal),
       sizeof(corkVal) );
 
    if(setRes != 0)
diff --git a/client_module/source/common/net/sock/StandardSocket.h b/client_module/source/common/net/sock/StandardSocket.h
index 1f7206b..c19e5c5 100644
--- a/client_module/source/common/net/sock/StandardSocket.h
+++ b/client_module/source/common/net/sock/StandardSocket.h
@@ -1,6 +1,8 @@
 #ifndef OPEN_STANDARDSOCKET_H_
 #define OPEN_STANDARDSOCKET_H_
 
+#include <linux/sockptr.h>
+
 #include <common/external/sdp_inet.h>
 #include <common/toolkit/StringTk.h>
 #include <common/toolkit/Time.h>
@@ -50,7 +52,7 @@ extern ssize_t StandardSocket_recvfromT(StandardSocket* this, struct iov_iter* i
 extern bool _StandardSocket_initSock(StandardSocket* this, int domain, int type,
    int protocol);
 extern void __StandardSocket_setAllocMode(StandardSocket* this, gfp_t flags);
-extern int _StandardSocket_setsockopt(StandardSocket* this, int level, int optname, char* optval,
+extern int _StandardSocket_setsockopt(StandardSocket* this, int level, int optname, sockptr_t optval,
    int optlen);
 extern int _StandardSocket_getsockopt(StandardSocket* this, int level, int optname,
    char *optval, int *optlen);
diff --git a/client_module/source/common/toolkit/HashTk.c b/client_module/source/common/toolkit/HashTk.c
index 564923a..4f72301 100644
--- a/client_module/source/common/toolkit/HashTk.c
+++ b/client_module/source/common/toolkit/HashTk.c
@@ -1,6 +1,6 @@
 #include <common/toolkit/HashTk.h>
 
-#include <linux/cryptohash.h>
+#include <crypto/sha.h>
 
 #define get16bits(d) (*((const uint16_t *) (d)))
 
diff --git a/client_module/source/common/toolkit/Time.h b/client_module/source/common/toolkit/Time.h
index b9f8402..305e602 100644
--- a/client_module/source/common/toolkit/Time.h
+++ b/client_module/source/common/toolkit/Time.h
@@ -26,7 +26,7 @@ static inline unsigned Time_elapsedMS(Time* this);
  */
 struct Time
 {
-   struct timespec now;
+   struct timespec64 now;
 };
 
 
@@ -35,7 +35,7 @@ struct Time
  */
 void Time_init(Time* this)
 {
-   ktime_get_ts(&this->now);
+   ktime_get_ts64(&this->now);
 }
 
 /**
@@ -48,7 +48,7 @@ void Time_initZero(Time* this)
 
 void Time_setToNow(Time* this)
 {
-   ktime_get_ts(&this->now);
+   ktime_get_ts64(&this->now);
 }
 
 
diff --git a/client_module/source/common/toolkit/TimeAbs.c b/client_module/source/common/toolkit/TimeAbs.c
index 8753a05..e3ffb83 100644
--- a/client_module/source/common/toolkit/TimeAbs.c
+++ b/client_module/source/common/toolkit/TimeAbs.c
@@ -4,13 +4,5 @@
 
 void TimeAbs_init(TimeAbs* this)
 {
-   struct timeval now;
-#if defined(KERNEL_HAS_KTIME_GET)
-   now = ktime_to_timeval(ktime_get_real());
-#else
-   do_gettimeofday(&now);
-#endif
-
-   this->now.tv_sec = now.tv_sec;
-   this->now.tv_usec = now.tv_usec;
+   this->now = ktime_get_real();
 }
diff --git a/client_module/source/common/toolkit/TimeAbs.h b/client_module/source/common/toolkit/TimeAbs.h
index d39b3d8..01fcd70 100644
--- a/client_module/source/common/toolkit/TimeAbs.h
+++ b/client_module/source/common/toolkit/TimeAbs.h
@@ -11,7 +11,7 @@ typedef struct TimeAbs TimeAbs;
 extern void TimeAbs_init(TimeAbs* this);
 
 // getters & setters
-static inline struct timeval* TimeAbs_getTimeval(TimeAbs* this);
+static inline s64 TimeAbs_getSec(TimeAbs* this);
 
 /**
  * This time class is based on a non-monotonic clock. Use the Time class instead of this one,
@@ -19,13 +19,13 @@ static inline struct timeval* TimeAbs_getTimeval(TimeAbs* this);
  */
 struct TimeAbs
 {
-   struct timeval now;
+   ktime_t now;
 };
 
 
-struct timeval* TimeAbs_getTimeval(TimeAbs* this)
+s64 TimeAbs_getSec(TimeAbs* this)
 {
-   return &this->now;
+   return ktime_divns(this->now, NSEC_PER_SEC);
 }
 
 #endif /*OPEN_TIMEABS_H_*/
diff --git a/client_module/source/filesystem/FhgfsOpsFile.c b/client_module/source/filesystem/FhgfsOpsFile.c
index 45ab3df..5559fd2 100644
--- a/client_module/source/filesystem/FhgfsOpsFile.c
+++ b/client_module/source/filesystem/FhgfsOpsFile.c
@@ -1148,10 +1148,12 @@ static ssize_t FhgfsOps_buffered_read_iter(struct kiocb *iocb, struct iov_iter *
       struct iovec iov;
       struct iov_iter iter = *to;
 
+#ifdef CONFIG_SET_FS
       mm_segment_t segment = get_fs();
 
       if (to->type & ITER_KVEC)
          set_fs(KERNEL_DS);
+#endif
 
       if (iter.count > (2<<30))
          iter.count = 2<<30;
@@ -1175,8 +1177,10 @@ static ssize_t FhgfsOps_buffered_read_iter(struct kiocb *iocb, struct iov_iter *
             break;
       }
 
+#ifdef CONFIG_SET_FS
       if (to->type & ITER_KVEC)
          set_fs(segment);
+#endif
    }
 #ifdef KERNEL_HAS_ITER_PIPE
    else if ((iov_iter_type(to) == ITER_BVEC) ||
@@ -1537,10 +1541,12 @@ static ssize_t FhgfsOps_buffered_write_iter(struct kiocb *iocb, struct iov_iter
       struct iovec iov;
       struct iov_iter iter = *from;
 
+#ifdef CONFIG_SET_FS
       mm_segment_t segment = get_fs();
 
       if (from->type & ITER_KVEC)
          set_fs(KERNEL_DS);
+#endif
 
       if (iter.count > (2<<30))
          iter.count = 2<<30;
@@ -1564,8 +1570,10 @@ static ssize_t FhgfsOps_buffered_write_iter(struct kiocb *iocb, struct iov_iter
             break;
       }
 
+#ifdef CONFIG_SET_FS
       if (from->type & ITER_KVEC)
          set_fs(segment);
+#endif
    }
 #ifdef KERNEL_HAS_ITER_PIPE
    else if ((iov_iter_type(from) == ITER_BVEC) ||
diff --git a/client_module/source/filesystem/FhgfsOpsInode.c b/client_module/source/filesystem/FhgfsOpsInode.c
index 9c19f12..dedd1de 100644
--- a/client_module/source/filesystem/FhgfsOpsInode.c
+++ b/client_module/source/filesystem/FhgfsOpsInode.c
@@ -832,7 +832,7 @@ void FhgfsOps_newAttrToInode(struct iattr* iAttr, struct inode* outInode)
       TimeAbs now;
       TimeAbs_init(&now);
 
-      outInode->i_mtime.tv_sec = TimeAbs_getTimeval(&now)->tv_sec;
+      outInode->i_mtime.tv_sec = TimeAbs_getSec(&now);
    }
 
    if(iAttr->ia_valid & ATTR_ATIME_SET)
@@ -845,7 +845,7 @@ void FhgfsOps_newAttrToInode(struct iattr* iAttr, struct inode* outInode)
       TimeAbs now;
       TimeAbs_init(&now);
 
-      outInode->i_atime.tv_sec = TimeAbs_getTimeval(&now)->tv_sec;
+      outInode->i_atime.tv_sec = TimeAbs_getSec(&now);
    }
 
    if(iAttr->ia_valid & ATTR_CTIME)
@@ -853,7 +853,7 @@ void FhgfsOps_newAttrToInode(struct iattr* iAttr, struct inode* outInode)
       TimeAbs now;
       TimeAbs_init(&now);
 
-      outInode->i_ctime.tv_sec = TimeAbs_getTimeval(&now)->tv_sec;
+      outInode->i_ctime.tv_sec = TimeAbs_getSec(&now);
    }
 
    spin_unlock(&outInode->i_lock);
@@ -2499,7 +2499,7 @@ int __FhgfsOps_doRefreshInode(App* app, struct inode* inode, fhgfs_stat* fhgfsSt
    FhgfsOpsErr statRes;
    FhgfsInode* fhgfsInode = BEEGFS_INODE(inode);
 
-   time_t oldMTime;
+   ktime_t oldMTime;
    loff_t oldSize;
    unsigned cacheElapsedMS;
    bool mtimeSizeInvalidate;
diff --git a/client_module/source/filesystem/ProcFs.c b/client_module/source/filesystem/ProcFs.c
index 97e2ed8..75ff350 100644
--- a/client_module/source/filesystem/ProcFs.c
+++ b/client_module/source/filesystem/ProcFs.c
@@ -26,16 +26,16 @@
  * Initializer for read-only proc file ops
  */
 #define BEEGFS_PROC_FOPS_INITIALIZER  \
-   .open    = __ProcFs_open,         \
-   .read    = seq_read,              \
-   .llseek  = seq_lseek,             \
-   .release = single_release
+   .proc_open    = __ProcFs_open,     \
+   .proc_read    = seq_read,          \
+   .proc_lseek   = seq_lseek,         \
+   .proc_release = single_release
 
 
 /**
  * generic file ops for procfs entries
  */
-static const struct file_operations fhgfs_proc_fops =
+static const struct proc_ops fhgfs_proc_fops =
 {
    BEEGFS_PROC_FOPS_INITIALIZER
 };
@@ -73,7 +73,7 @@ struct fhgfs_proc_file_rw
    char name[32]; // filename
    int (*show)(struct seq_file *, void *); // the show method of this file
    //ssize_t (*write)(struct file *, const char __user *, size_t, loff_t *); // the write method
-   struct file_operations proc_fops;
+   struct proc_ops proc_fops;
 };
 
 /**
@@ -87,30 +87,30 @@ static const struct fhgfs_proc_file_rw fhgfs_proc_files_rw[] =
    { BEEGFS_PROC_ENTRY_RETRIESENABLED, &__ProcFs_readV2_connRetriesEnabled,
       {
          BEEGFS_PROC_FOPS_INITIALIZER,
-         .write   = &__ProcFs_writeV2_connRetriesEnabled,
+         .proc_write = &__ProcFs_writeV2_connRetriesEnabled,
       },
    },
    { BEEGFS_PROC_ENTRY_NETBENCHENABLED, &__ProcFs_readV2_netBenchModeEnabled,
       {
          BEEGFS_PROC_FOPS_INITIALIZER,
-         .write   = &__ProcFs_writeV2_netBenchModeEnabled,
+         .proc_write = &__ProcFs_writeV2_netBenchModeEnabled,
       },
    },
    { BEEGFS_PROC_ENTRY_DROPCONNS, &__ProcFs_readV2_nothing,
       {
          BEEGFS_PROC_FOPS_INITIALIZER,
-         .write   = &__ProcFs_writeV2_dropConns,
+         .proc_write = &__ProcFs_writeV2_dropConns,
       },
    },
    { BEEGFS_PROC_ENTRY_LOGLEVELS, &__ProcFs_readV2_logLevels,
       {
          BEEGFS_PROC_FOPS_INITIALIZER,
-         .write   = &__ProcFs_writeV2_logLevels,
+         .proc_write = &__ProcFs_writeV2_logLevels,
       },
    },
    { "", NULL,
       {
-        .open = NULL,
+        .proc_open = NULL,
       },
    } // last element must be empty (for loop termination)
 };
diff --git a/client_module/source/os/OsTypeConversion.h b/client_module/source/os/OsTypeConversion.h
index 8e34d49..bdc4663 100644
--- a/client_module/source/os/OsTypeConversion.h
+++ b/client_module/source/os/OsTypeConversion.h
@@ -117,7 +117,7 @@ void OsTypeConv_iattrOsToFhgfs(struct iattr* iAttr, SettableFileAttribs* fhgfsAt
       TimeAbs_init(&now);
 
       (*outValidAttribs) |= SETATTR_CHANGE_MODIFICATIONTIME;
-      fhgfsAttr->modificationTimeSecs = TimeAbs_getTimeval(&now)->tv_sec;
+      fhgfsAttr->modificationTimeSecs = TimeAbs_getSec(&now);
    }
 
    if(iAttr->ia_valid & ATTR_ATIME_SET)
@@ -132,7 +132,7 @@ void OsTypeConv_iattrOsToFhgfs(struct iattr* iAttr, SettableFileAttribs* fhgfsAt
       TimeAbs_init(&now);
 
       (*outValidAttribs) |= SETATTR_CHANGE_LASTACCESSTIME;
-      fhgfsAttr->lastAccessTimeSecs = TimeAbs_getTimeval(&now)->tv_sec;
+      fhgfsAttr->lastAccessTimeSecs = TimeAbs_getSec(&now);
    }
 }
 
