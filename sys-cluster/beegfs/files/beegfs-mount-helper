#!/bin/bash

BEEGFS_MOUNT_CONF=/etc/beegfs/beegfs-mounts.conf
MOUNT_HOOK=/etc/beegfs/beegfs-client-mount-hook
DEFAULT_FSTYPE=beegfs

exec_mount_hook() {
	set +e
	if [ -f "${MOUNT_HOOK}" ]; then
		/bin/bash -c "${MOUNT_HOOK} ${1} \"${2}\""
	fi
	if [ -f "${MOUNT_HOOK}-${2//\//-}" ]; then
		/bin/bash -c "\"${MOUNT_HOOK}-${2//\//-}\" ${1}"
	fi
	set -e
}

start() {
	ret=0
	cat $BEEGFS_MOUNT_CONF | while IFS= read -r line; do
		[ -z "$line" ] && continue

		mnt="$(echo "$line" | awk '{print $1}')"
		cfg="$(echo "$line" | awk '{print $2}')"
		fstype="$(echo "$line" | awk '{print $3}')"
		opts="$(echo "$line" | awk '{print $4}')"

		if [ -z "$mnt" -o -z "$cfg" ]; then
			echo "Invalid config line: \"$line\""
			ret=1
			continue
		fi

		[ -z "$fstype" ] && fstype="$DEFAULT_FSTYPE"

		if mount -t "$fstype" | grep "on $mnt type" >/dev/null 2>&1; then
			continue
		fi

		if [ ! -e "$mnt" ]; then
			mkdir -p "$mnt"
		fi

		exec_mount_hook pre-mount "$mnt"

		if mount -t "$fstype" beegfs_nodev "$mnt" -ocfgFile="${cfg}",_netdev,"${opts}"; then
			exec_mount_hook post-mount "$mnt"
		else
			echo "Failed mounting \"$mnt\""
			ret=1
		fi
	done
	return $ret
}

stop() {
	ret=0
	tac $BEEGFS_MOUNT_CONF | while IFS= read -r line; do
		[ -z "$line" ] && continue

		mnt="$(echo "$line" | awk '{print $1}')"
		cfg="$(echo "$line" | awk '{print $2}')"

		if [ -z "$mnt" -o -z "$cfg" ]; then
			echo "Invalid config line: \"$line\""
			ret=1
			continue
		fi

		if mount -t "$fstype" | grep "on $mnt type" >/dev/null 2>&1; then
			exec_mount_hook pre-unmount "$mnt"

			if umount "$mnt"; then
				exec_mount_hook post-unmount "$mnt"
			else
				echo "Failed unmounting \"$mnt\""
				ret=1
			fi
		fi
	done

	if ! mount -t beegfs | grep beegfs >/dev/null 2>&1; then
		if ! modprobe -r beegfs; then
			echo "Failed unloading beegfs module"
			ret=1
		fi
	fi

	return $ret
}

set -e

case "$1" in
	start)
		start()
		;;
	stop)
		stop()
		;;
	restart)
		stop() && start()
		;;
esac
